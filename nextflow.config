/*
 * -------------------------------------------------
 *  peterk87/nf-biohansel-sra-benchmark Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Workflow manifest
manifest {
  name = 'peterk87/nf-biohansel-sra-benchmark'
  author = 'Peter Kruczkiewicz'
  homePage = 'https://github.com/peterk87/nf-biohansel-sra-benchmark'
  description = 'Nextflow Workflow for benchmarking biohansel against NCBI SRA genomes'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
  version = '1.0dev'
}

// Global default params, used in configs
params {
  // Container slug. Stable releases should specify release tag!
  //   Developmental code should specify :latest
  container = 'peterk87/nf-biohansel-sra-benchmark:latest'
  // Workflow options
  outdir = "results"
  help = false
  schemesdir = 'schemes'
  n_genomes = 96
  iterations = 10
  thread_combos = '1,2,4,8,16,32'
  random_seed = 42
  tracedir = "${params.outdir}/pipeline_info"
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Workflow execution config profiles
profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    process.container = { "shub://${params.container}" }
  }
  slurm {
    process {
      executor = 'slurm'
      queue = params.slurm_queue
    }
  } 
  test { includeConfig 'conf/test.config' }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Trace information
timeline {
  enabled = true
  file = "${params.tracedir}/timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/dag.svg"
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
